#####################################
#            Created by             #
#               SBR                 #
#####################################
config_name = 'secrets.json'
#####################################
import os
import telebot
import schedule
import time
import copy
import platform
import pyvirtualdisplay
import threading
from threading import Lock
from os import listdir
from os.path import isfile, join
from datetime import datetime
from parser import ConfigParser, UpdateMatches, FonBet, LigaStavok, Pari, BetCity, Leon, OlimpBet
from frontend import Bot_inline_btns
from backend import TempUserData, DbAct, Excel
from db import DB
#####################################


def sync_db():
    if datetime.now().month == 1 and datetime.now().day == 1 or config.get_config()['update_every_day']:
        for sport in ['football', 'hockey', 'basketball']:
            threading.Thread(target=UpdateMatches, args=(db_actions, sport)).start()


def choose_sport(user_id, sport):
    temp_user_data.temp_data(user_id)[user_id][0] = 0
    temp_user_data.temp_data(user_id)[user_id][1] = sport
    bot.send_message(user_id, '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã')


def matches(data):
    s = ''
    for i, g in enumerate(data):
        year = g[0][2:4]
        months = g[0][5:7]
        day = g[0][8:10]
        times = g[0][11:16]
        s += f'{i+1}. {g[1]} - {g[2]} {f"{day}.{months}.{year} {times}"}\n'
    return s


def schedule_worker():
    while True:
        schedule.run_pending()
        time.sleep(1)


def cleaner():
    if platform.system() == 'Windows':
        path = f"{os.getenv('APPDATA')}\\undetected_chromedriver"
    else:
        path = f"{os.getenv('HOME')}/.local/share/undetected_chromedriver"
    for f in listdir(path):
        if isfile(f'{path}/{f}'):
            try:
                os.remove(f'{path}/{f}')
            except:
                pass


def waiter(user_id, s='', c=0):
    ratios = list()
    out = list()
    temp = list()
    buttons = Bot_inline_btns()
    while True:
        c+=1
        if len(temp_user_data.temp_data(user_id)[user_id][4]) == 6:
            break
        elif c >= 180:
            break
        time.sleep(1)
    for i in temp_user_data.temp_data(user_id)[user_id][4]:
        ratios.append(i[1])
    ratios.sort()
    for i in reversed(ratios):
        for g in temp_user_data.temp_data(user_id)[user_id][4]:
            if g[1] == i and g[0] not in temp:
                if '–º–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω' not in g[0]:
                    out.append(f'<a href="{g[2][2]}">‚Ä¢ {g[0]}{g[2][0]} <b>{g[2][1]}</b> | {g[3][0]} <b>{g[3][1]}</b> | {g[4][0]} <b>{g[4][1]}</b></a>\n\n')
                else:
                    out.append(f'{g[0]}\n')
                temp.append(g[0])
    for i in out:
        s += i
    temp_user_data.temp_data(user_id)[user_id][4] = copy.deepcopy([])
    temp_user_data.temp_data(user_id)[user_id][0] = None
    cleaner()
    bot.send_message(user_id, s, parse_mode='html', disable_web_page_preview=True)
    time.sleep(1)
    if s.count('–º–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω') == 6:
        bot.send_message(user_id, '–ú–∞—Ç—á –≤–∏–∂—É, –Ω–æ –Ω–µ –≤–∏–∂—É –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤ –ë–ö. –í–æ–∑–º–æ–∂–Ω–æ, –±—É–∫–º–µ–∫–µ—Ä—ã –µ—â–µ –Ω–µ –¥–∞–ª–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã.\n–•–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –µ—â—ë –∫—ç—Ñ—ã?', reply_markup=buttons.new_btns())
    else:
        bot.send_message(user_id,
                         '–•–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –µ—â—ë –∫—ç—Ñ—ã?',
                         reply_markup=buttons.new_btns())
    ### —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
    #if '–º–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω' in s:
        #temp_user_data.temp_data(user_id)[user_id][0] = 3
        #bot.send_message(user_id, '–ù–µ –≤—Å–µ –∫—ç—Ñ—ã –Ω–∞—à–ª–∏—Å—å? –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç—á–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>"–õ–æ–∫–æ–º–æ—Ç–∏–≤ - –¶–°–ö–ê"</b>, '
                                  #'—Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –ª—É—á—à–µ!', parse_mode='html')



def get_all_ratio(user_id):
    selected_teams = temp_user_data.temp_data(user_id)[user_id][3]
    inp_team = temp_user_data.temp_data(user_id)[user_id][5]
    sport = temp_user_data.temp_data(user_id)[user_id][1]
    temp_user_data.temp_data(user_id)[user_id][0] = 2
    bot.send_message(user_id, f'–ò—â—É –ª—É—á—à–∏–µ –∫—ç—Ñ—ã –Ω–∞ –º–∞—Ç—á "{temp_user_data.temp_data(user_id)[user_id][3][1]} - {temp_user_data.temp_data(user_id)[user_id][3][2]}" üîé\n–ú–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 2 –º–∏–Ω—É—Ç ‚è≥')
    threading.Thread(target=LigaStavok, args=(inp_team, sport, selected_teams, temp_user_data, user_id)).start()# work all
    threading.Thread(target=FonBet, args=(inp_team, sport, selected_teams, temp_user_data, user_id)).start()  # work all
    threading.Thread(target=OlimpBet, args=(inp_team, sport, selected_teams, temp_user_data, user_id)).start()# work all
    threading.Thread(target=Pari, args=(inp_team, sport, selected_teams, temp_user_data, user_id)).start() # work all
    threading.Thread(target=BetCity, args=(inp_team, sport, selected_teams, temp_user_data, user_id)).start()  # work all
    threading.Thread(target=Leon, args=(inp_team, sport, selected_teams, temp_user_data, user_id)).start()# work fine
    threading.Thread(target=waiter, args=(user_id, )).start()


def main():
    @bot.message_handler(commands=['start', 'admin'])
    def start_msg(message):
        user_id = message.from_user.id
        buttons = Bot_inline_btns()
        command = message.text.replace('/', '')
        db_actions.add_user(user_id, message.from_user.first_name, message.from_user.last_name,
                            f'@{message.from_user.username}')
        if command == 'start':
            bot.send_message(message.chat.id, '–Ø - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ —Å—Ç–∞–≤–æ–∫ –Ω–∞ —Å–ø–æ—Ä—Ç üèÜ\n–ü–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Å–∞–º—ã–µ –≤—ã–≥–æ–¥–Ω—ã–µ '
                                              '–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å—Ä–µ–¥–∏ –ª—É—á—à–∏—Ö\n–±—É–∫–º–µ–∫–µ—Ä—Å–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π üéØ\n\n–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n–í—ã–±–µ—Ä–∏—Ç–µ'
                                              ' –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞ ->\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã ->\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –º–∞—Ç—á\n\n'
                                              ' –ù–∞–π–¥—É –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–∞ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ –ø–æ —Ä–∞–∑–Ω—ã–º –ë–ö, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ —Å–¥–µ–ª–∞—Ç—å '
                                              '—Å–∞–º—É—é –≤—ã–≥–æ–¥–Ω—É—é —Å—Ç–∞–≤–∫—É üí∞\n\n–í–æ—Ç –ø–æ –∫–∞–∫–∏–º –±—É–∫–º–µ–∫–µ—Ä–∞–º —è –º–æ–≥—É –∏—Å–∫–∞—Ç—å:\n\n'
                                              '<a href="https://www.fon.bet/">FonBet</a>\n'
                                              '<a href="https://www.ligastavok.ru/">–õ–∏–≥–∞ —Å—Ç–∞–≤–æ–∫</a>\n'
                                              '<a href="https://www.pari.ru/">Pari</a>\n'
                                              '<a href="https://leon.ru/">–õ–µ–æ–Ω</a>\n'
                                              '<a href="https://betcity.ru/ru">–ë—ç—Ç–°–∏—Ç–∏</a>\n'
                                              '<a href="https://www.olimp.bet/">Olimpbet</a>\n',
                             reply_markup=buttons.start_btns(), parse_mode='html', disable_web_page_preview=True)
        elif command == 'admin':
            if db_actions.user_is_admin(user_id):
                bot.send_message(user_id, '–í—ã –ø–æ–ø–∞–ª–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', reply_markup=buttons.admin_btns())

    @bot.callback_query_handler(func=lambda call: True)
    def callback(call):
        command = call.data
        buttons = Bot_inline_btns()
        user_id = call.message.chat.id
        if db_actions.user_is_existed(user_id):
            code = temp_user_data.temp_data(user_id)[user_id][0]
            if command[:5] == 'sport':
                choose_sport(user_id, command[5:])
            elif command[:4] == 'game' and code == 1:
                if command[4:] == '–í—ã–±—Ä–∞—Ç—å —Å–ø–æ—Ä—Ç':
                    temp_user_data.temp_data(user_id)[user_id][0] = None
                    bot.send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Ä—Ç', reply_markup=buttons.new_btns())
                else:
                    temp_user_data.temp_data(user_id)[user_id][3] = temp_user_data.temp_data(user_id)[user_id][2][int(command[4:])]
                    get_all_ratio(user_id)
            elif command == 'update_often_teams':
                temp_user_data.temp_data(user_id)[user_id][0] = 4
                bot.send_message(user_id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx')

    @bot.message_handler(content_types=['text', 'photo', 'document'])
    def text_message(message):
        user_input = message.text
        user_id = message.chat.id
        buttons = Bot_inline_btns()
        code = temp_user_data.temp_data(user_id)[user_id][0]
        if db_actions.user_is_existed(user_id):
            match user_input:
                case '–§—É—Ç–±–æ–ª ‚öΩÔ∏è':
                    choose_sport(user_id, 'football')
                case '–•–æ–∫–∫–µ–πüèí':
                    choose_sport(user_id, 'hockey')
                case '–ë–∞—Å–∫–µ—Ç–±–æ–ª üèÄ':
                    choose_sport(user_id, 'basketball')
            match code:
                case 0:
                    if user_input is not None:
                        full_data = db_actions.get_team_matches(temp_user_data.temp_data(user_id)[user_id][1], user_input)
                        temp_user_data.temp_data(user_id)[user_id][5] = user_input
                        if len(full_data) > 0:
                            if len(full_data) == 1:
                                temp_user_data.temp_data(user_id)[user_id][3] = full_data[0]
                                get_all_ratio(user_id)
                            else:
                                temp_user_data.temp_data(user_id)[user_id][2] = full_data
                                temp_user_data.temp_data(user_id)[user_id][0] = 1
                                s = matches(full_data)
                                bot.send_message(user_id, f'–î–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–∞—à–ª–æ—Å—å {len(full_data)} –º–∞—Ç—á–µ–π: \n{s}',
                                                 reply_markup=buttons.games_btns(len(full_data)))
                        else:
                            bot.send_message(user_id, '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ –¥—Ä—É–≥–æ–º—É: –Ω–µ –Ω–∞—à–µ–ª –∫–æ–º–∞–Ω–¥—É :(', reply_markup=buttons.new_btns())
                    else:
                        bot.send_message(user_id, '–≠—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç!')
                case 3:
                    if user_input is not None:
                        if '-' in user_input:
                            index = user_input.index('-')
                            team1 = user_input[:index]
                            team2 = user_input[index+1:]
                            date = temp_user_data.temp_data(user_id)[user_id][3][0]
                            temp_user_data.temp_data(user_id)[user_id][3] = [date, team1, team2]
                            temp_user_data.temp_data(user_id)[user_id][0] = None
                            get_all_ratio(user_id)
                        else:
                            bot.send_message(user_id, '–ë–µ–∑ –∑–Ω–∞–∫–∞ "-" —è –Ω–µ –ø–æ–Ω–∏–º–∞—é –∫–∞–∫ –æ—Ç–ª–∏—á–∏—Ç—å 2 –∫–æ–º–∞–Ω–¥—ã. –ù–∞–ø–∏—à–∏—Ç–µ –µ—â—ë —Ä–∞–∑')
                    else:
                        bot.send_message(user_id, '–≠—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç!')
            if db_actions.user_is_admin(user_id):
                match code:
                    case 4:
                        document_id = message.document.file_id
                        file_info = bot.get_file(document_id)
                        downloaded_file = bot.download_file(file_info.file_path)
                        with open(config.get_config()['teams_xlsx_doc'], 'wb') as new_file:
                            new_file.write(downloaded_file)
                        data = excel.read_teams_names()
                        db_actions.update_overwrite_teams(data)

    bot.polling(none_stop=True)


if '__main__' == __name__:
    os_type = platform.system()
    work_dir = os.path.dirname(os.path.realpath(__file__))
    config = ConfigParser(f'{work_dir}/{config_name}', os_type)
    temp_user_data = TempUserData()
    db = DB(config.get_config()['db_file_name'], Lock())
    db_actions = DbAct(db, config, config.get_config()['xlsx_path'])
    excel = Excel(config, db, db_actions)
    threading.Thread(target=schedule_worker).start()
    schedule.every().day.at('00:00').do(sync_db)
    sync_db()
    bot = telebot.TeleBot(config.get_config()['tg_api'])
    main()
